#!/bin/bash

echo "Redirecionadores de saída:"
echo -e "Os redirecionadores de saída, mudam a saída padrão de um comando, que é o monitor (podendo ser o erro ou o acerto) para um determinado arquivo."
echo -e "O símbolo '>' redireciona e sobrescreve o arquivo com a saída do comando caso não haja falha no mesmo." 
echo -e "Exemplo: ls > arquivos.tx \nNeste caso todos os arquivos listados ao invés de aparecerem no monitor, serão sobrescrevidos no arquivo 'arquivos.txt'\n"
echo -e "Para não sobrescrever o arquivo basta utilizar o símbolo '>>', a saída do comando irá ser escrita no final do arquivo."
echo -e "Exemplo: ls >> arquivos.txt\n"
echo -e "Para redirecionar a mensagem de erro, caso o comando não funcione, basta utilizar o redirecionador '2>' e em seguida o nome do arquivo que desejas queseja redirecionada a saída de erros do comando."
echo -e "Exemplo: ls kkkkk 2> erros.txt"
echo -e "Neste caso, ao executar novamente este comando, ele sempre irá sobrescrever o arquivo 'erros.txt, caso queira manter todas as saídas de erros em todas as vezes que for executar o comando, basta utilizar o redirecionador '2>>' que ele irá escrever toda a saída de erros do comando no final do arquivo."
echo -e "Exemplo: ls kkkkkk 2>> erros.txt \n"
echo -e "Para redirecionar ambos (erros e 'acertos') do comando, basta utilizar o símbolo '&>', ele redirecionará tudo para o arquivo desejado."
echo -e "Exemplo: ls &> ambos.txt \n"
echo -e "Neste caso, ao executar novamente este comando, ele sempre irá sobrescrever o arquivo 'ambos.txt', caso queira manter todas as saídas do arquivo e ir sempre adicionando as 'novas' saídas, basta utilizar '&>>', que todas as saídas do comando serão escritas no final do arquivo"
echo -e "Exemplo: 'ls &&>> ambos.txt \n"
echo "Redirecionadores de entrada:"
echo "Os redirecionadores de entrada mudam a entrada padrão (que é o teclado) para um arquivo ou uma string"
echo -e "Utilizando o símbolo '<' é possível utilizar um arquivo como entrada para um comando. \nExemplo: ls < a.txt \nO comando ls será executado levando em consideração o que está escrito no arquivo a.txt\n"
echo -e "Utilizando o símbolo '<<' você 'cria' um arquivo e digita uma string que será utilizada como referência para que o arquivo fique 'aberto' até que essa string seja digitada. \nExemplo: wc -l << END \nSerá criado um arquivo ondevocê poderá digitar qualquer coisa e o mesmo será fechado quando a string 'END' for digitada\n"
echo -e "Utilizando o símbolo '<<<'poderá ser utilizado uma string para substituir a entrada padrão do comando. \nExemplo: O comando wc -l espera que algo seja digitado do teclado, porém ao utilizarmos 'wc -l <<< 'cincun' o comando fará a leitura apenas da string 'cincun' retirando a necessidade de algo ser digitado no teclado.\n"
echo -e "Ao utilizarmos o redirecionador '|', ele redirecionará a saída padrão de um comando para a entrada padrão de outro comando. \nExemplo: cat help_red.sh | wc -l \nO '|' fará com que a saída do comando cat seja utilizada como entrada do comando wc -l." 
